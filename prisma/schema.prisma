// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id
  typeOfEvent String
  player      String
  time        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  fifaId      String?
  extraInfo   Json?

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  match   Match  @relation(fields: [matchId], references: [id])
  matchId String
}

model Match {
  id                  String   @id @default(cuid())
  fifaId              String   @unique
  fifaCompetitionId   String
  fifaSeasonId        String
  fifaGroupId         String?
  fifaStageId         String
  fifaMatchNumber     Int?
  fifaPlaceholderA    String?
  fifaPlaceholderB    String?
  stageName           String
  location            String
  venue               String?
  attendance          String?
  date                DateTime
  homeTeamScore       Int?
  awayTeamScore       Int?
  homeTeamPenalties   Int?
  awayTeamPenalties   Int?
  time                String?
  firstHalfTime       String?
  secondHalfTime      String?
  firstHalfExtraTime  String?
  secondHalfExtraTime String?
  status              String
  officials           Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  homeTeam   Team?   @relation(name: "homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId String?

  awayTeam   Team?   @relation(name: "awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId String?

  winner     Team?        @relation(name: "winner", fields: [winnerId], references: [id])
  winnerId   String?
  matchStats MatchStats[]
  events     Event[]

  bracket   Bracket? @relation(fields: [bracketId], references: [id])
  bracketId String?
}

model MatchStats {
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  match   Match  @relation(fields: [matchId], references: [id])
  matchId String

  attemptsOnGoal   Int?
  kicksOnTarget    Int?
  kicksOffTarget   Int?
  kicksBlocked     Int?
  kicksOnWoodwork  Int?
  corners          Int?
  offsides         Int?
  ballPossession   Float?
  passes           Int?
  passesCompleted  Int?
  distanceCovered  Float?
  freeKicks        Int?
  crosses          Int?
  crossesCompleted Int?
  assists          Int?
  yellowCards      Int?
  redCards         Int?
  foulsCommited    Int?
  foulsReceived    Int?
  startingPlayers  Json?
  coaches          Json?
  substitutes      Json?
  tactics          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  @@id([teamId, matchId])
}

model Group {
  id        String   @id @default(cuid())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  teams Team[]
}

model Team {
  id            String @id @default(cuid())
  country       String @unique
  alternateName String
  fifaCode      String

  position Int @default(0)
  points   Int @default(0)
  draws    Int @default(0)
  wins     Int @default(0)
  losses   Int @default(0)
  played   Int @default(0)

  goalsScored     Int @default(0)
  goalsConceded   Int @default(0)
  goalsDifference Int @default(0)

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  events Event[]

  homeMatches Match[]      @relation("homeTeam")
  awayMatches Match[]      @relation("awayTeam")
  wonMatches  Match[]      @relation("winner")
  matchStats  MatchStats[]
}

model Bracket {
  id      String  @id @default(cuid())
  name    String
  matches Match[]
}
